"""
middleware.py: Middleware class for handling faults at the driver level.

This module provides an abstract middelware class that is implemented by
each of the custom middleware classes for each component driver.

The goal of the middleware is to catch the exceptions generated by the driver
and convert them into uniquely known exceptions that can be handled by the
flight software.

Author: Harry Rosmann

"""
import types
from diagnostics.diagnostics import Diagnostics
from exceptions import *
from micropython import const
from hal.drivers.gps import GPS
from hal.drivers.adm1176 import ADM1176
from hal.drivers.bmx160 import BMX160
from hal.drivers.bq25883 import BQ25883
from hal.drivers.burnwire import BurnWires
from hal.drivers.pcf8523 import PCF8523
from hal.drivers.drv8830 import DRV8830
from hal.drivers.opt4001 import OPT4001
from hal.drivers.rfm9x import RFM9x

# The default number of retries for the middleware
# NOTE: Keep this value low to prevent loss of timing
FAULT_HANDLE_RETRIES = const(1)

class DriverMiddleware:
    """DriverMiddleware: Middleware class for handling faults at the driver level.
        
    This class provides a middleware class that wraps the driver instance and
    catches the exceptions generated by the driver. The middleware class then
    converts the exceptions into uniquely known exceptions that can be handled
    by the flight software.
    """

    def __init__(self, cls_instance: Diagnostics, exception: Exception):
        """__init__: Constructor for the DriverMiddleware class.
        
        :param cls_instance: The instance of the driver class to wrap
        :param exception: The unique exception to be raised if fault not handled
        """
        self.exception = exception

        self._wrapped_instance = cls_instance
        self._wrapped_attributes = {}
        self.wrap_attributes()

    def wrap_attributes(self):
        """wrap_attributes: Wrap the attributes of the driver instance.
        """
        for name in dir(self._wrapped_instance):
            attr = getattr(self._wrapped_instance, name)
            if callable(attr) or isinstance(attr, property):
                self._wrapped_attributes[name] = self.wrap_attribute(attr)

    def __getattr__(self, name):
        """__getattr__: Get the attribute of the driver instance.

        :param name: The name of the attribute to get
        """
        if name in self._wrapped_attributes:
            return self._wrapped_attributes[name]
        return getattr(self._wrapped_instance, name)

    def wrap_attribute(self, attr):
        """wrap_attribute: Wrap the attribute of the driver instance.

        :param attr: The attribute to wrap
        """
        if callable(attr):
            return types.MethodType(self.wrap_method(attr), self)
        elif isinstance(attr, property):
            return property(
                fget=types.MethodType(self.wrap_method(attr.fget), self) if attr.fget else None,
                fset=types.MethodType(self.wrap_method(attr.fset), self) if attr.fset else None,
                fdel=types.MethodType(self.wrap_method(attr.fdel), self) if attr.fdel else None,
                doc=attr.__doc__
            )
        return attr

    def wrap_method(self, method):
        """wrap_method: Wrap the method of the driver instance.

        :param method: The method to wrap
        """
        def wrapper(*args, **kwargs):
            try:
                return method(*args, **kwargs)
            except Exception as e:
                if not self.handle_fault(method, *args, **kwargs):
                    raise self.exception(e)
                
                ## Second layer of exception handling
                try:
                    return method(*args, **kwargs)
                except Exception as e:
                    # Don't try to recover this time
                    raise self.exception(e)
                    
        return wrapper
    
    def handle_fault(self, method, args, kwargs) -> bool:
        """handle_fault: Handle the exception generated by the fault.

        :returns: True the value requested, otherwise raises exception
        """
        if not self._wrapped_instance.resetable:
            return False

        tries = 0
        while (tries < FAULT_HANDLE_RETRIES):
            try:
                self._wrapped_instance.reset()
                method(*args, **kwargs) # Run the method again
                return True
            except Exception as e:
                tries += 1

########################## Component Middlewares ##############################

class GPSMiddleware(DriverMiddleware):
    """GPSExceptionMiddleware: Middleware class for GPS exceptions

    This class is responsible for wrapping all methods in the GPS class
    """
    Exception = gps_fatal_exception

    def __init__(self, cls: GPS):
        """__init__: Constructor for the GPSExceptionMiddleware class
        """
        super().__init__(cls, self.Exception)

class BatteryPowerMonitorMiddleware(DriverMiddleware):
    """BatteryMonitorMiddleware: Middleware class for BMS exceptions

    This class is responsible for wrapping all methods in the GPS class
    """
    Exception = battery_power_monitor_fatal_exception

    def __init__(self, cls: ADM1176):
        """__init__: Constructor for the GPSExceptionMiddleware class
        """
        super().__init__(cls, self.Exception)

class JetsonPowerMonitorMiddleware(DriverMiddleware):
    """JetsonPowerMonitorMiddleware: Middleware class for BMS exceptions

    This class is responsible for wrapping all methods in the GPS class
    """
    Exception = jetson_power_monitor_fatal_exception

    def __init__(self, cls: ADM1176):
        """__init__: Constructor for the JetsonPowerMonitorMiddleware class
        """
        super().__init__(cls, self.Exception)

class IMUMiddleware(DriverMiddleware):
    """IMUMiddleware: Middleware class for IMU exceptions

    This class is responsible for wrapping all methods in the IMU class
    """
    Exception = imu_fatal_exception

    def __init__(self, cls: BMX160):
        """__init__: Constructor for the BMXExceptionMiddleware class
        """
        super().__init__(cls, self.Exception)

class ChargerMiddleware(DriverMiddleware):
    """ChargerMiddleware: Middleware class for USB Charger

    This class is responsible for wrapping all methods in the USB Charger
    """
    Exception = charger_fatal_exception

    def __init__(self, cls: BQ25883):
        """__init__: Constructor for the ChargerExceptionMiddleware class
        """
        super().__init__(cls, self.Exception)

class BurnWireMiddleware(DriverMiddleware):
    """BurnWireMiddleware: Middleware class for BurnWire exceptions

    This class is responsible for wrapping all methods in the burnwire class
    """
    Exception = burn_wire_fatal_exception
    def __init__(self, cls: BurnWires):
        super().__init__(cls,self.Exception)
        

class SunSensorXPMiddleware(DriverMiddleware):
    """SunSensorXPMiddleware: Middleware class for exceptions from x+ sun sensor

    This class is responsible for wrapping all methods in the sun sensor object
    """
    Exception = sun_sensor_xp_fatal_exception

    def __init__(self, cls: OPT4001):
        """__init__: Constructor for the SunSensorXPMiddleware class
        """
        super().__init__(cls, self.Exception)

class SunSensorXMMiddleware(DriverMiddleware):
    """SunSensorXMMiddleware: Middleware class for exceptions from x- sun sensor

    This class is responsible for wrapping all methods in the sun sensor object
    """
    Exception = sun_sensor_xm_fatal_exception

    def __init__(self, cls: OPT4001):
        """__init__: Constructor for the SunSensorXMMiddleware class
        """
        super().__init__(cls, self.Exception)

class SunSensorYPMiddleware(DriverMiddleware):
    """SunSensorYPMiddleware: Middleware class for exceptions from y+ sun sensor

    This class is responsible for wrapping all methods in the sun sensor object
    """
    Exception = sun_sensor_yp_fatal_exception

    def __init__(self, cls: OPT4001):
        """__init__: Constructor for the SunSensorYPMiddleware class
        """
        super().__init__(cls, self.Exception)

class SunSensorYMMiddleware(DriverMiddleware):
    """SunSensorYMMiddleware: Middleware class for exceptions from y- sun sensor

    This class is responsible for wrapping all methods in the sun sensor object
    """
    Exception = sun_sensor_ym_fatal_exception

    def __init__(self, cls: OPT4001):
        """__init__: Constructor for the SunSensorYMMiddleware class
        """
        super().__init__(cls, self.Exception)

class SunSensorZPMiddleware(DriverMiddleware):
    """SunSensorZPMiddleware: Middleware class for exceptions from z+ sun sensor

    This class is responsible for wrapping all methods in the sun sensor object
    """
    Exception = sun_sensor_zp_fatal_exception

    def __init__(self, cls: OPT4001):
        """__init__: Constructor for the SunSensorZPMiddleware class
        """
        super().__init__(cls, self.Exception)

class SunSensorZMMiddleware(DriverMiddleware):
    """SunSensorZMMiddleware: Middleware class for exceptions from z- sun sensor

    This class is responsible for wrapping all methods in the sun sensor object
    """
    Exception = sun_sensor_zp_fatal_exception

    def __init__(self, cls: OPT4001):
        """__init__: Constructor for the SunSensorZMMiddleware class
        """
        super().__init__(cls, self.Exception)     

class TorqueXPMiddleware(DriverMiddleware):
    """TorqueXPMiddleware: Middleware class for exceptions from x+ torque driver

    This class is responsible for wrapping all methods in the torque object
    """
    Exception = torque_xp_fatal_exception

    def __init__(self, cls: DRV8830):
        """__init__: Constructor for the TorqueXPMiddleware class
        """
        super().__init__(cls, self.Exception)

class TorqueXMMiddleware(DriverMiddleware):
    """TorqueXMMiddleware: Middleware class for exceptions from x- torque driver

    This class is responsible for wrapping all methods in the torque object
    """
    Exception = torque_xm_fatal_exception

    def __init__(self, cls: DRV8830):
        """__init__: Constructor for the TorqueXMMiddleware class
        """
        super().__init__(cls, self.Exception)

class TorqueYPMiddleware(DriverMiddleware):
    """TorqueYPMiddleware: Middleware class for exceptions from y+ torque driver

    This class is responsible for wrapping all methods in the torque object
    """
    Exception = torque_yp_fatal_exception

    def __init__(self, cls: DRV8830):
        """__init__: Constructor for the TorqueYPMiddleware class
        """
        super().__init__(cls, self.Exception)

class TorqueYMMiddleware(DriverMiddleware):
    """TorqueYMMiddleware: Middleware class for exceptions from y- torque driver

    This class is responsible for wrapping all methods in the torque object
    """
    Exception = torque_ym_fatal_exception

    def __init__(self, cls: DRV8830):
        """__init__: Constructor for the TorqueYMMiddleware class
        """
        super().__init__(cls, self.Exception)

class TorqueZMiddleware(DriverMiddleware):
    """TorqueZMiddleware: Middleware class for exceptions from z torque driver

    This class is responsible for wrapping all methods in the torque object
    """
    Exception = torque_z_fatal_exception

    def __init__(self, cls: DRV8830):
        """__init__: Constructor for the TorqueZMiddleware class
        """
        super().__init__(cls, self.Exception)

class RadioMiddleware(DriverMiddleware):
    """RadioMiddleware: Middleware class for exceptions from Radio Module

    This class is responsible for wrapping all methods in the Radio object
    """
    Exception = radio_fatal_exception

    def __init__(self, cls: RFM9x):
        """__init__: Constructor for the RadioMiddleware class
        """
        super().__init__(cls, self.Exception)

class RTC_Middleware(DriverMiddleware):
    """RTC_Middleware: Middleware class for exceptions from Real Time Clock Module

    This class is responsible for wrapping all methods in the RTC object
    """
    Exception = rtc_fatal_exception

    def __init__(self, cls: PCF8523):
        """__init__: Constructor for the RTC_Middleware class
        """
        super().__init__(cls, self.Exception)